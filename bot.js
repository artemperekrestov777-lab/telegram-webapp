const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const helmet = require('helmet');
const compression = require('compression');
const rateLimit = require('express-rate-limit');
const morgan = require('morgan');
const path = require('path');
const fs = require('fs').promises;
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3000;
const BOT_TOKEN = process.env.BOT_TOKEN;
const ADMIN_ID = process.env.ADMIN_ID;
const WEBAPP_URL = process.env.WEBAPP_URL;

// Security middleware
app.use(helmet({
    contentSecurityPolicy: {
        directives: {
            defaultSrc: ["'self'"],
            scriptSrc: ["'self'", "'unsafe-inline'", "https://telegram.org"],
            styleSrc: ["'self'", "'unsafe-inline'"],
            imgSrc: ["'self'", "data:", "https:", "blob:"],
            connectSrc: ["'self'", "https://api.telegram.org", "https://artemperekrestov777-lab.github.io"]
        }
    }
}));

app.use(compression());
app.use(cors({
    origin: [WEBAPP_URL, 'https://artemperekrestov777-lab.github.io'],
    credentials: true
}));

// Rate limiting
const limiter = rateLimit({
    windowMs: parseInt(process.env.RATE_LIMIT_WINDOW_MS) || 60000,
    max: parseInt(process.env.RATE_LIMIT_MAX_REQUESTS) || 100,
    message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
});

app.use('/api', limiter);
app.use(bodyParser.json({ limit: '10mb' }));
app.use(bodyParser.urlencoded({ extended: true, limit: '10mb' }));
app.use(morgan('combined'));

// Static files
app.use(express.static(path.join(__dirname, 'public')));
app.use('/webapp', express.static(path.join(__dirname, 'webapp')));
app.use('/admin', express.static(path.join(__dirname, 'admin')));

// Initialize bot
const bot = new TelegramBot(BOT_TOKEN, {
    polling: false,
    webHook: true
});

// Order counter storage
let orderCounter = { lastOrderNumber: 0 };
const COUNTER_FILE = path.join(__dirname, 'data', 'orderCounter.json');

// Load order counter
async function loadOrderCounter() {
    try {
        await fs.mkdir(path.join(__dirname, 'data'), { recursive: true });
        const data = await fs.readFile(COUNTER_FILE, 'utf8');
        orderCounter = JSON.parse(data);
    } catch (error) {
        console.log('Creating new order counter');
        await saveOrderCounter();
    }
}

// Save order counter
async function saveOrderCounter() {
    try {
        await fs.mkdir(path.join(__dirname, 'data'), { recursive: true });
        await fs.writeFile(COUNTER_FILE, JSON.stringify(orderCounter, null, 2));
    } catch (error) {
        console.error('Error saving order counter:', error);
    }
}

// Generate order number
async function generateOrderNumber() {
    orderCounter.lastOrderNumber++;
    await saveOrderCounter();
    return `T${orderCounter.lastOrderNumber}`;
}

// User sessions storage
const userSessions = new Map();
const cartStorage = new Map();

// Bot commands
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    // Initialize user session
    if (!userSessions.has(userId)) {
        userSessions.set(userId, {
            userId: userId,
            userName: msg.from.first_name,
            cart: [],
            userData: null,
            createdAt: new Date()
        });
    }

    const welcomeMessage = `–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –ú–ê–ö–¢–ê–ë–ê–ö!

–†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –æ–Ω–ª–∞–π–Ω-–º–∞–≥–∞–∑–∏–Ω–µ –ú–∞–∫–¢–∞–±–∞–∫.

–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ —Å –Ω–∞—à–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ —Å–º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∑–∞ –ø–∞—Ä—É –º–∏–Ω—É—Ç, –≤—ã–±—Ä–∞—Ç—å —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º –î–æ—Å—Ç–∞–≤–∫–∏.

–ß—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –ø–æ–∫—É–ø–∫–∞–º, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ ¬´–ö–∞—Ç–∞–ª–æ–≥¬ª.

–ü—Ä–∏—è—Ç–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫!`;

    const keyboard = {
        inline_keyboard: [[
            {
                text: '–ö–∞—Ç–∞–ª–æ–≥',
                web_app: { url: `${WEBAPP_URL}?userId=${userId}` }
            }
        ]]
    };

    await bot.sendMessage(chatId, welcomeMessage, {
        reply_markup: keyboard
    });

    // Check for abandoned cart
    const session = userSessions.get(userId);
    if (session.cart && session.cart.length > 0) {
        setTimeout(async () => {
            await bot.sendMessage(chatId,
                `‚ö†Ô∏è –£ –≤–∞—Å –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ!\n` +
                `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${session.cart.length} —Ç–æ–≤–∞—Ä–æ–≤\n` +
                `‚è∞ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏.`,
                { reply_markup: keyboard }
            );
        }, 2000);
    }
});

// Handle callback queries (button presses)
bot.on('callback_query', async (callbackQuery) => {
    const action = callbackQuery.data;
    const msg = callbackQuery.message;

    if (action.startsWith('order_processed_')) {
        const orderNumber = action.replace('order_processed_', '');

        // Update message
        const updatedText = msg.text + '\n\n‚úÖ <b>–ó–ê–ö–ê–ó –û–ë–†–ê–ë–û–¢–ê–ù</b>';

        await bot.editMessageText(updatedText, {
            chat_id: msg.chat.id,
            message_id: msg.message_id,
            parse_mode: 'HTML'
        });

        // Send confirmation alert
        await bot.answerCallbackQuery(callbackQuery.id, {
            text: `‚úÖ –ó–∞–∫–∞–∑ ${orderNumber} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π`,
            show_alert: true
        });
    }
});

// Admin command
bot.onText(/\/admin/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    console.log(`Admin command from user ${userId}`);

    // Check admin rights - replace with your admin ID
    const ADMIN_IDS = [parseInt(ADMIN_ID)]; // Using ADMIN_ID from .env

    if (!ADMIN_IDS.includes(userId)) {
        await bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
        return;
    }

    const adminMessage = `üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:`;

    const keyboard = {
        inline_keyboard: [[
            {
                text: 'üîß –û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å',
                web_app: { url: `${WEBAPP_URL}?admin=true` }
            }
        ]]
    };

    await bot.sendMessage(chatId, adminMessage, {
        reply_markup: keyboard
    });
});

// WebApp data handler
bot.on('web_app_data', async (msg) => {
    const chatId = msg.chat.id;
    const data = JSON.parse(msg.web_app_data.data);

    try {
        switch(data.action) {
            case 'order':
                // Check if this is a Moscow order that needs special manager notification
                if (data.isFromMoscow && data.managerMessage) {
                    // Send enhanced notification to manager
                    const MANAGER_CHAT_ID = ADMIN_ID;

                    // Formatted message for manager
                    const managerNotification = `
üîî <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó –ò–ó –ú–û–°–ö–í–´!</b>

üì¶ <b>–ó–∞–∫–∞–∑ ‚Ññ:</b> ${data.orderNumber}
üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> ${data.userData.fullName}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${data.userData.phone}
üìß <b>Email:</b> ${data.userData.email}
üè† <b>–ê–¥—Ä–µ—Å:</b> ${data.userData.city}, ${data.userData.address}

üõí <b>–¢–æ–≤–∞—Ä—ã:</b>
${data.cart.map(item => `‚Ä¢ ${item.name} - ${item.quantity} ${item.unit === 'weight' ? '–≥' : '—à—Ç'} x ${item.price}‚ÇΩ`).join('\n')}

üí∞ <b>–ò—Ç–æ–≥–æ:</b> ${data.totalAmount} ‚ÇΩ
üöö <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> ${data.deliveryMethod}

üìù <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${data.userData.comment || '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}

‚ö° <b>–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç–∞!</b>
                    `;

                    // Quick action buttons
                    const keyboard = {
                        inline_keyboard: [
                            [
                                {
                                    text: 'üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å',
                                    url: `tel:${data.userData.phone}`
                                },
                                {
                                    text: '‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞ email',
                                    url: `mailto:${data.userData.email}`
                                }
                            ],
                            [
                                {
                                    text: '‚úÖ –ó–∞–∫–∞–∑ –æ–±—Ä–∞–±–æ—Ç–∞–Ω',
                                    callback_data: `order_processed_${data.orderNumber}`
                                }
                            ]
                        ]
                    };

                    try {
                        // Send notification to manager
                        await bot.sendMessage(MANAGER_CHAT_ID, managerNotification, {
                            parse_mode: 'HTML',
                            reply_markup: keyboard
                        });

                        // Confirm to client
                        await bot.sendMessage(chatId,
                            `‚úÖ –í–∞—à –∑–∞–∫–∞–∑ ${data.orderNumber} –ø—Ä–∏–Ω—è—Ç!\n\n` +
                            `–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç–∞.\n` +
                            `üìß Email –¥–ª—è —Å–≤—è–∑–∏: ${process.env.MANAGER_EMAIL}`
                        );
                    } catch (error) {
                        console.error('Error sending manager notification:', error);
                        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                    }
                } else {
                    // Regular order processing
                    await processOrder(chatId, msg.from.id, data);
                }
                break;
            case 'saveCart':
                saveUserCart(msg.from.id, data.cart);
                break;
            case 'getUserData':
                sendUserData(chatId, msg.from.id);
                break;
        }
    } catch (error) {
        console.error('Error processing webapp data:', error);
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// Process order
async function processOrder(chatId, userId, orderData) {
    const orderNumber = await generateOrderNumber();
    const { cart, userData, totalAmount, deliveryMethod } = orderData;

    // Check minimum weight for weight-based products
    const weightProducts = cart.filter(item => item.unit === 'weight');
    const totalWeight = weightProducts.reduce((sum, item) => sum + (item.quantity * item.packageWeight), 0);

    if (weightProducts.length > 0 && totalWeight < 1000) {
        await bot.sendMessage(chatId,
            '‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º –∑–∞–∫–∞–∑–∞ –ø–æ –≤–µ—Å–æ–≤—ã–º —Ç–æ–≤–∞—Ä–∞–º –æ—Ç 1 –∫–≥\n' +
            `–¢–µ–∫—É—â–∏–π –≤–µ—Å: ${totalWeight}–≥`
        );
        return;
    }

    // Save user data for future orders
    const session = userSessions.get(userId);
    if (session) {
        session.userData = userData;
        userSessions.set(userId, session);
    }

    // Check if Moscow region
    const isMoscowRegion = checkMoscowRegion(userData.city);

    if (isMoscowRegion) {
        // Send to manager
        await sendOrderToManager(orderNumber, userData, cart, totalAmount, deliveryMethod);
        await bot.sendMessage(chatId,
            `‚úÖ –ó–∞–∫–∞–∑ ${orderNumber} –ø—Ä–∏–Ω—è—Ç!\n\n` +
            `–° –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—á—ë—Ç–∞.\n\n` +
            `üìß Email: ${process.env.MANAGER_EMAIL}`
        );
    } else {
        // Generate QR code and payment instructions
        const qrCodeUrl = generateQRCode(totalAmount);
        const paymentMessage = `
–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–æ –∫–æ–Ω—Ü–∞ ‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏èüëáüèªüëáüèªüëáüèª

–ó–∞–∫–∞–∑ ${orderNumber} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.
–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –¥–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞: —á–µ—Ä–µ–∑ 3-7 –¥–Ω–µ–π!
–°—Ä–æ–∫–∏ –º–æ–≥—É—Ç —Å–¥–≤–∏–≥–∞—Ç—å—Å—è –æ—Ç 1 –¥–æ 7 –¥–Ω–µ–π!

(–†–∞—Å—Å—ã–ª–∫–∞ —Ç—Ä–µ–∫ –Ω–æ–º–µ—Ä–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–∏ 2—Ö –¥–Ω–µ–π –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏!)

‚ÄºÔ∏è–í–ù–ò–ú–ê–ù–ò–ï‚ùóÔ∏è–í–ê–ñ–ù–û‚ÄºÔ∏è
–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ –û–¢–ü–†–ê–í–¨–¢–ï –ß–ï–ö –Ω–∞ –ø–æ—á—Ç—É: ${process.env.MANAGER_EMAIL}
–∏ –≤ –ø–∏—Å—å–º–µ –£–ö–ê–ñ–ò–¢–ï –ù–û–ú–ï–† –ó–ê–ö–ê–ó–ê!!!

üö´–ü–ò–°–¨–ú–û –° –ß–ï–ö–û–ú –î–û–°–¢–ê–¢–û–ß–ù–û –û–¢–ü–†–ê–í–ò–¢–¨ –û–î–ò–ù –†–ê–ó‚ÄºÔ∏è‚ÄºÔ∏è
(–Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ —á–µ–∫ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑!)

üìå–í –ö–û–ú–ú–ï–ù–¢–ê–†–ò–Ø–• –ö –ü–õ–ê–¢–ï–ñ–£ –ù–ò–ß–ï–ì–û –ü–ò–°–ê–¢–¨ –ù–ï –ù–£–ñ–ù–û‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è

–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${totalAmount} —Ä—É–±.

(!–í–ê–ñ–ù–û! –ù–ï –î–ï–õ–ê–¢–¨ –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ 1,2,3, 10 —Ä—É–±–ª–µ–π!!! –í–≤–æ–¥–∏—Ç–µ –ø–æ–ª–Ω—É—é —Å—É–º–º—É!)`;

        await bot.sendPhoto(chatId, qrCodeUrl, {
            caption: paymentMessage,
            parse_mode: 'HTML'
        });
    }

    // Clear cart after order
    const updatedSession = userSessions.get(userId);
    if (updatedSession) {
        updatedSession.cart = [];
        userSessions.set(userId, updatedSession);
    }
}

// Check Moscow region
function checkMoscowRegion(city) {
    const moscowRegions = [
        '–º–æ—Å–∫–≤–∞', 'moscow', '–º—Å–∫',
        '–º–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–ø–æ–¥–º–æ—Å–∫–æ–≤—å–µ',
        '–±–∞–ª–∞—à–∏—Ö–∞', '—Ö–∏–º–∫–∏', '–ø–æ–¥–æ–ª—å—Å–∫', '–∫–æ—Ä–æ–ª—ë–≤', '–º—ã—Ç–∏—â–∏',
        '–ª—é–±–µ—Ä—Ü—ã', '–∫—Ä–∞—Å–Ω–æ–≥–æ—Ä—Å–∫', '—ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–ª—å', '–∫–æ–ª–æ–º–Ω–∞', '–æ–¥–∏–Ω—Ü–æ–≤–æ',
        '–¥–æ–º–æ–¥–µ–¥–æ–≤–æ', '—Å–µ—Ä–ø—É—Ö–æ–≤', '—â—ë–ª–∫–æ–≤–æ', '—Ä–∞–º–µ–Ω—Å–∫–æ–µ', '–æ—Ä–µ—Ö–æ–≤–æ-–∑—É–µ–≤–æ',
        '–¥–æ–ª–≥–æ–ø—Ä—É–¥–Ω—ã–π', '—Ä–µ—É—Ç–æ–≤', '–∂—É–∫–æ–≤—Å–∫–∏–π', '–ø—É—à–∫–∏–Ω–æ', '–Ω–æ–≥–∏–Ω—Å–∫',
        '—Å–µ—Ä–≥–∏–µ–≤ –ø–æ—Å–∞–¥', '–¥–º–∏—Ç—Ä–æ–≤', '–≤–∏–¥–Ω–æ–µ', '–ª–æ–±–Ω—è', '–∏–≤–∞–Ω—Ç–µ–µ–≤–∫–∞',
        '–∫–ª–∏–Ω', '–¥—É–±–Ω–∞', '–µ–≥–æ—Ä—å–µ–≤—Å–∫', '—á–µ—Ö–æ–≤', '–Ω–∞—Ä–æ-—Ñ–æ–º–∏–Ω—Å–∫'
    ];

    const normalizedCity = city.toLowerCase().trim();
    return moscowRegions.some(region => normalizedCity.includes(region));
}

// Send order to manager
async function sendOrderToManager(orderNumber, userData, cart, totalAmount, deliveryMethod) {
    const orderDetails = cart.map(item =>
        `‚Ä¢ ${item.name} - ${item.quantity} ${item.unit === 'weight' ? '–≥' : '—à—Ç'} x ${item.price}‚ÇΩ = ${item.quantity * item.price}‚ÇΩ`
    ).join('\n');

    const message = `
üì¶ –ù–û–í–´–ô –ó–ê–ö–ê–ó ${orderNumber}

üë§ –ö–ª–∏–µ–Ω—Ç:
–§–ò–û: ${userData.fullName}
–¢–µ–ª–µ—Ñ–æ–Ω: ${userData.phone}
Email: ${userData.email}
–ì–æ—Ä–æ–¥: ${userData.city}
–ê–¥—Ä–µ—Å: ${userData.address}

üõí –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:
${orderDetails}

üí∞ –ò—Ç–æ–≥–æ: ${totalAmount}‚ÇΩ
üöö –î–æ—Å—Ç–∞–≤–∫–∞: ${deliveryMethod}

–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${userData.comment || '–ù–µ—Ç'}
    `;

    await bot.sendMessage(ADMIN_ID, message);
}

// Generate QR code URL
function generateQRCode(amount) {
    const paymentData = `ST00012|Name=${process.env.PAYMENT_RECEIVER}|PersonalAcc=${process.env.PAYMENT_ACCOUNT}|BankName=|BIC=${process.env.PAYMENT_BIK}|CorrespAcc=|Sum=${amount}00`;
    const encodedData = encodeURIComponent(paymentData);
    return `https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=${encodedData}`;
}

// Save user cart
function saveUserCart(userId, cart) {
    const session = userSessions.get(userId);
    if (session) {
        session.cart = cart;
        userSessions.set(userId, session);
    }
}

// Send user data
async function sendUserData(chatId, userId) {
    const session = userSessions.get(userId);
    if (session && session.userData) {
        await bot.sendMessage(chatId, JSON.stringify({
            action: 'userData',
            data: session.userData
        }));
    }
}

// API endpoints for WebApp
app.get('/api/products', async (req, res) => {
    try {
        const productsPath = path.join(__dirname, 'data', 'products.json');
        const productsData = await fs.readFile(productsPath, 'utf8');
        res.json(JSON.parse(productsData));
    } catch (error) {
        console.error('Error loading products:', error);
        res.status(500).json({ error: 'Failed to load products' });
    }
});

app.post('/api/order', async (req, res) => {
    try {
        const orderData = req.body;
        const orderNumber = await generateOrderNumber();

        // Process order logic
        res.json({
            success: true,
            orderNumber: orderNumber,
            message: 'Order processed successfully'
        });
    } catch (error) {
        console.error('Error processing order:', error);
        res.status(500).json({ error: 'Failed to process order' });
    }
});

app.get('/api/user/:userId', (req, res) => {
    const userId = parseInt(req.params.userId);
    const session = userSessions.get(userId);

    if (session && session.userData) {
        res.json({ userData: session.userData });
    } else {
        res.json({ userData: null });
    }
});

app.post('/api/cart/:userId', (req, res) => {
    const userId = parseInt(req.params.userId);
    const { cart } = req.body;

    saveUserCart(userId, cart);
    res.json({ success: true });
});

// API endpoint for manager notifications (backup method)
app.post('/api/notify-manager', async (req, res) => {
    try {
        const { orderNumber, clientName, phone, email, city, address, cart, totalAmount, deliveryMethod, comment, message } = req.body;
        const MANAGER_CHAT_ID = ADMIN_ID;

        // Formatted message for manager
        let managerNotification;
        if (message) {
            managerNotification = message;
        } else {
            managerNotification = `
üîî <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó!</b>

üì¶ <b>–ó–∞–∫–∞–∑ ‚Ññ:</b> ${orderNumber}
üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> ${clientName}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phone}
üìß <b>Email:</b> ${email}
üè† <b>–ê–¥—Ä–µ—Å:</b> ${city}, ${address}

üí∞ <b>–°—É–º–º–∞:</b> ${totalAmount} ‚ÇΩ

‚ö° <b>–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º!</b>
            `;
        }

        // Quick action buttons
        const keyboard = {
            inline_keyboard: [
                [
                    { text: 'üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å', url: `tel:${phone}` },
                    { text: '‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞ email', url: `mailto:${email}` }
                ],
                [
                    { text: '‚úÖ –ó–∞–∫–∞–∑ –æ–±—Ä–∞–±–æ—Ç–∞–Ω', callback_data: `order_processed_${orderNumber}` }
                ]
            ]
        };

        // Send notification to manager
        await bot.sendMessage(MANAGER_CHAT_ID, managerNotification, {
            parse_mode: 'HTML',
            reply_markup: keyboard
        });

        res.json({ success: true, message: 'Manager notified' });
    } catch (error) {
        console.error('Error notifying manager:', error);
        res.status(500).json({ success: false, error: error.message });
    }
});

// Admin API endpoints
app.post('/api/admin/products', async (req, res) => {
    // Verify admin
    if (req.body.adminId !== ADMIN_ID) {
        return res.status(403).json({ error: 'Unauthorized' });
    }

    try {
        const productsPath = path.join(__dirname, 'data', 'products.json');
        await fs.writeFile(productsPath, JSON.stringify(req.body.products, null, 2));
        res.json({ success: true });
    } catch (error) {
        console.error('Error saving products:', error);
        res.status(500).json({ error: 'Failed to save products' });
    }
});

// Health check
app.get('/health', (req, res) => {
    res.json({ status: 'OK', timestamp: new Date().toISOString() });
});

// Error handling
app.use((err, req, res, next) => {
    console.error('Error:', err);
    res.status(500).json({ error: 'Internal server error' });
});

// Graceful shutdown
process.on('SIGTERM', async () => {
    console.log('SIGTERM signal received: closing HTTP server');
    server.close(() => {
        console.log('HTTP server closed');
        process.exit(0);
    });
});

process.on('SIGINT', async () => {
    console.log('SIGINT signal received: closing HTTP server');
    server.close(() => {
        console.log('HTTP server closed');
        process.exit(0);
    });
});

// Prevent multiple instances
const lockFile = path.join(__dirname, 'bot.lock');

async function acquireLock() {
    try {
        await fs.writeFile(lockFile, process.pid.toString());
        return true;
    } catch (error) {
        const existingPid = await fs.readFile(lockFile, 'utf8');
        try {
            process.kill(existingPid, 0);
            console.log('Bot is already running with PID:', existingPid);
            return false;
        } catch (e) {
            console.log('Removing stale lock file');
            await fs.unlink(lockFile);
            return acquireLock();
        }
    }
}

async function releaseLock() {
    try {
        await fs.unlink(lockFile);
    } catch (error) {
        console.error('Error releasing lock:', error);
    }
}

// Start server
let server;

async function startBot() {
    const hasLock = await acquireLock();
    if (!hasLock) {
        console.log('Bot is already running. Exiting...');
        process.exit(0);
    }

    await loadOrderCounter();

    server = app.listen(PORT, () => {
        console.log(`Server is running on port ${PORT}`);
        console.log(`WebApp URL: ${WEBAPP_URL}`);
        console.log(`Bot started successfully!`);
    });

    // Set webhook
    const webhookUrl = `${process.env.SERVER_URL || `http://localhost:${PORT}`}/bot${BOT_TOKEN}`;
    await bot.setWebHook(webhookUrl);

    app.post(`/bot${BOT_TOKEN}`, (req, res) => {
        bot.processUpdate(req.body);
        res.sendStatus(200);
    });
}

// Cleanup on exit
process.on('exit', async () => {
    await releaseLock();
});

startBot().catch(console.error);